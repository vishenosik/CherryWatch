package main

import (
	"fmt"
	"log"
	"net/http"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

var (
	bot          *tgbotapi.BotAPI
	subscribers  = make(map[int64]bool) // –•—Ä–∞–Ω–∏–º chatID –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
	messageText  = "LIGMA! üöÄ"
	pollInterval = 10 * time.Second
)

func CheckSSO() (int, error) {

	url := "http://127.0.0.1:4080/api/ping"
	method := "GET"

	client := &http.Client{}
	req, err := http.NewRequest(method, url, nil)
	if err != nil {
		return 0, err
	}

	res, err := client.Do(req)
	if err != nil {
		return 0, err
	}
	defer res.Body.Close()

	return res.StatusCode, nil
}

func handleChecks() {
	ticker := time.NewTicker(pollInterval)
	defer ticker.Stop()

	for range ticker.C {

		code, err := CheckSSO()
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä–≤–∏—Å–∞ %v", err)
		}

		for chatID := range subscribers {
			msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("SSO check code: %v", code))
			if _, err := bot.Send(msg); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è %d: %v", chatID, err)
				// –£–¥–∞–ª—è–µ–º –æ—Ç–ø–∏—Å–∞–≤—à–∏—Ö—Å—è –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–≤—à–∏—Ö –±–æ—Ç–∞
				delete(subscribers, chatID)
			}
		}
	}
}

func main() {
	var err error
	// –ó–∞–º–µ–Ω–∏—Ç–µ "YOUR_TELEGRAM_BOT_TOKEN" –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
	bot, err = tgbotapi.NewBotAPI("7667795695:AAFAiFEQvxm9DPZt-Z3_cUJNZbX_T_6oaf0")
	if err != nil {
		log.Panic(err)
	}

	tgbotapi.NewBotCommandScopeAllPrivateChats()

	bot.Debug = true
	log.Printf("–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ %s", bot.Self.UserName)

	// –ö–∞–Ω–∞–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := bot.GetUpdatesChan(u)

	// tgbotapi.SetLogger()

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ—Ä—É—Ç–∏–Ω—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫
	go handleChecks()

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
	for update := range updates {
		if update.Message == nil {
			continue
		}

		chatID := update.Message.Chat.ID
		text := update.Message.Text

		switch text {
		case "/start", "/subscribe":
			subscribers[chatID] = true
			msg := tgbotapi.NewMessage(chatID, "–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É! –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –≤–∞–º –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")
			bot.Send(msg)
		case "/stop", "/unsubscribe":
			delete(subscribers, chatID)
			msg := tgbotapi.NewMessage(chatID, "–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.")
			bot.Send(msg)
		default:
			msg := tgbotapi.NewMessage(chatID, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –∏–ª–∏ /unsubscribe —á—Ç–æ–±—ã –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è.")
			bot.Send(msg)
		}
	}
}

// –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
func handleSubscriptions() {
	ticker := time.NewTicker(pollInterval)
	defer ticker.Stop()

	for range ticker.C {
		log.Printf("–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è %d –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º", len(subscribers))
		for chatID := range subscribers {
			msg := tgbotapi.NewMessage(chatID, messageText)
			if _, err := bot.Send(msg); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è %d: %v", chatID, err)
				// –£–¥–∞–ª—è–µ–º –æ—Ç–ø–∏—Å–∞–≤—à–∏—Ö—Å—è –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–≤—à–∏—Ö –±–æ—Ç–∞
				delete(subscribers, chatID)
			}
		}
	}
}
